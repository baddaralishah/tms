package com.badar.tms.models;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;


@Entity
@Table(name="Tickets")
public class Tickets {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name="ticket_id")
	private long id;
	
	@Column(name = "time_frame",nullable = false)
	private Date timeToSpend;
	
	@Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_at", nullable = false, updatable = false)
    @CreatedDate
    private Date createdAt;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated_at", nullable = false)
    @LastModifiedDate
    private Date updatedAt;
    
	@Column(name="ticket_name",nullable= false)
	private String title;
	
	@Column(name="ticket_description",nullable= true)
	private String description;
	private String assignee;
	
	@Transient
	private Long parentId;

	@ManyToOne(fetch = FetchType.LAZY, optional=true)
	@JoinColumn(name="parent_id")
	private Tickets parent;

	@OneToMany(mappedBy="parent", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval=true)
	private Set<Tickets> children = new HashSet<Tickets>();

	public Tickets() {
		super();
	}

	public Tickets(Date timeToSpend, String title, String description, String assignee,
			Long parentId, Tickets parent, Set<Tickets> children) {
		super();
		this.timeToSpend = timeToSpend;
		this.title = title;
		this.description = description;
		this.assignee = assignee;
		this.parentId = parentId;
		this.parent = parent;
		this.children = children;
	}

	
	
	
}
