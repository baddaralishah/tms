package com.badar.tms.services;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.FileSystemUtils;
import org.springframework.web.multipart.MultipartFile;

import com.badar.tms.models.TStatuses;
import com.badar.tms.repositories.TicketMediaRepository;
import com.badar.tms.repositories.TicketStatusRepository;

@Service
public class MediaService {

	@Autowired
	TicketMediaRepository repository;
	private final Path root = Paths.get("uploads");
	
	  public void init() {
	    try {
	      Files.createDirectory(root);
	    } catch (IOException e) {
	      throw new RuntimeException("Could not initialize folder for upload!");
	    }
	  }

	  public void save(MultipartFile file) {
	    try {
	      Files.copy(file.getInputStream(), this.root.resolve(file.getOriginalFilename()));
	    } catch (Exception e) {
	      throw new RuntimeException("Could not store the file. Error: " + e.getMessage());
	    }
	  }

	  public Resource load(String filename) {
	    try {
	      Path file = root.resolve(filename);
	      Resource resource = new UrlResource(file.toUri());

	      if (resource.exists() || resource.isReadable()) {
	        return resource;
	      } else {
	        throw new RuntimeException("Could not read the file!");
	      }
	    } catch (MalformedURLException e) {
	      throw new RuntimeException("Error: " + e.getMessage());
	    }
	  }

	  public void deleteAll() {
	    FileSystemUtils.deleteRecursively(root.toFile());
	  }

	  public Stream<Path> loadAll() {
	    try {
	      return Files.walk(this.root, 1).filter(path -> !path.equals(this.root)).map(this.root::relativize);
	    } catch (IOException e) {
	      throw new RuntimeException("Could not load the files!");
	    }
	  }
	  
	  
		public List<TStatuses> getAllTStatuses(){
			List<TStatuses> data = new ArrayList<TStatuses>();  
			repository.findAll().forEach(dum -> data.add(dum));  
			return data;  
		}
		
		public TStatuses getTicketById(long id){  
			return repository.findById(id).get();  
		}
		
		public void saveOrUpdate(TStatuses data){  
		repository.save(data);  
		}
		
		public void delete(long id){  
		repository.deleteById(id);  
		} 
		
		public void update(TStatuses data, long id)   
		{  
		repository.save(data);  
		}
}
